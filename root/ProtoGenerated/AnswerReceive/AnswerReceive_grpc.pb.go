// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: AnswerReceive.proto

package AnswerReceive

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Dictionary_SendFilesCount_FullMethodName = "/AnswerReceive.Dictionary/SendFilesCount"
	Dictionary_SendDictionary_FullMethodName = "/AnswerReceive.Dictionary/SendDictionary"
	Dictionary_Search_FullMethodName         = "/AnswerReceive.Dictionary/Search"
)

// DictionaryClient is the client API for Dictionary service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DictionaryClient interface {
	SendFilesCount(ctx context.Context, in *FilesCount, opts ...grpc.CallOption) (*UploadResponse, error)
	SendDictionary(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[WordEntry, UploadResponse], error)
	Search(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[Query, QueryResult], error)
}

type dictionaryClient struct {
	cc grpc.ClientConnInterface
}

func NewDictionaryClient(cc grpc.ClientConnInterface) DictionaryClient {
	return &dictionaryClient{cc}
}

func (c *dictionaryClient) SendFilesCount(ctx context.Context, in *FilesCount, opts ...grpc.CallOption) (*UploadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UploadResponse)
	err := c.cc.Invoke(ctx, Dictionary_SendFilesCount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictionaryClient) SendDictionary(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[WordEntry, UploadResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Dictionary_ServiceDesc.Streams[0], Dictionary_SendDictionary_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[WordEntry, UploadResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Dictionary_SendDictionaryClient = grpc.ClientStreamingClient[WordEntry, UploadResponse]

func (c *dictionaryClient) Search(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[Query, QueryResult], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Dictionary_ServiceDesc.Streams[1], Dictionary_Search_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Query, QueryResult]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Dictionary_SearchClient = grpc.BidiStreamingClient[Query, QueryResult]

// DictionaryServer is the server API for Dictionary service.
// All implementations must embed UnimplementedDictionaryServer
// for forward compatibility.
type DictionaryServer interface {
	SendFilesCount(context.Context, *FilesCount) (*UploadResponse, error)
	SendDictionary(grpc.ClientStreamingServer[WordEntry, UploadResponse]) error
	Search(grpc.BidiStreamingServer[Query, QueryResult]) error
	mustEmbedUnimplementedDictionaryServer()
}

// UnimplementedDictionaryServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDictionaryServer struct{}

func (UnimplementedDictionaryServer) SendFilesCount(context.Context, *FilesCount) (*UploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendFilesCount not implemented")
}
func (UnimplementedDictionaryServer) SendDictionary(grpc.ClientStreamingServer[WordEntry, UploadResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SendDictionary not implemented")
}
func (UnimplementedDictionaryServer) Search(grpc.BidiStreamingServer[Query, QueryResult]) error {
	return status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedDictionaryServer) mustEmbedUnimplementedDictionaryServer() {}
func (UnimplementedDictionaryServer) testEmbeddedByValue()                    {}

// UnsafeDictionaryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DictionaryServer will
// result in compilation errors.
type UnsafeDictionaryServer interface {
	mustEmbedUnimplementedDictionaryServer()
}

func RegisterDictionaryServer(s grpc.ServiceRegistrar, srv DictionaryServer) {
	// If the following call pancis, it indicates UnimplementedDictionaryServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Dictionary_ServiceDesc, srv)
}

func _Dictionary_SendFilesCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilesCount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictionaryServer).SendFilesCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dictionary_SendFilesCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictionaryServer).SendFilesCount(ctx, req.(*FilesCount))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dictionary_SendDictionary_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DictionaryServer).SendDictionary(&grpc.GenericServerStream[WordEntry, UploadResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Dictionary_SendDictionaryServer = grpc.ClientStreamingServer[WordEntry, UploadResponse]

func _Dictionary_Search_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DictionaryServer).Search(&grpc.GenericServerStream[Query, QueryResult]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Dictionary_SearchServer = grpc.BidiStreamingServer[Query, QueryResult]

// Dictionary_ServiceDesc is the grpc.ServiceDesc for Dictionary service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Dictionary_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "AnswerReceive.Dictionary",
	HandlerType: (*DictionaryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendFilesCount",
			Handler:    _Dictionary_SendFilesCount_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendDictionary",
			Handler:       _Dictionary_SendDictionary_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Search",
			Handler:       _Dictionary_Search_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "AnswerReceive.proto",
}
