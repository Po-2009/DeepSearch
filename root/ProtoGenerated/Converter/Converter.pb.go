// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: Converter.proto

package Converter

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FileChunk struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filename      string                 `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
	Content       []byte                 `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FileChunk) Reset() {
	*x = FileChunk{}
	mi := &file_Converter_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileChunk) ProtoMessage() {}

func (x *FileChunk) ProtoReflect() protoreflect.Message {
	mi := &file_Converter_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileChunk.ProtoReflect.Descriptor instead.
func (*FileChunk) Descriptor() ([]byte, []int) {
	return file_Converter_proto_rawDescGZIP(), []int{0}
}

func (x *FileChunk) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *FileChunk) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

type ParsedText struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filename      string                 `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
	Text          string                 `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ParsedText) Reset() {
	*x = ParsedText{}
	mi := &file_Converter_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParsedText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParsedText) ProtoMessage() {}

func (x *ParsedText) ProtoReflect() protoreflect.Message {
	mi := &file_Converter_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParsedText.ProtoReflect.Descriptor instead.
func (*ParsedText) Descriptor() ([]byte, []int) {
	return file_Converter_proto_rawDescGZIP(), []int{1}
}

func (x *ParsedText) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *ParsedText) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

var File_Converter_proto protoreflect.FileDescriptor

const file_Converter_proto_rawDesc = "" +
	"\n" +
	"\x0fConverter.proto\x12\tConverter\"A\n" +
	"\tFileChunk\x12\x1a\n" +
	"\bfilename\x18\x01 \x01(\tR\bfilename\x12\x18\n" +
	"\acontent\x18\x02 \x01(\fR\acontent\"<\n" +
	"\n" +
	"ParsedText\x12\x1a\n" +
	"\bfilename\x18\x01 \x01(\tR\bfilename\x12\x12\n" +
	"\x04text\x18\x02 \x01(\tR\x04text2K\n" +
	"\tConverter\x12>\n" +
	"\vConvertFile\x12\x14.Converter.FileChunk\x1a\x15.Converter.ParsedText(\x010\x01B\rZ\v/;Converterb\x06proto3"

var (
	file_Converter_proto_rawDescOnce sync.Once
	file_Converter_proto_rawDescData []byte
)

func file_Converter_proto_rawDescGZIP() []byte {
	file_Converter_proto_rawDescOnce.Do(func() {
		file_Converter_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_Converter_proto_rawDesc), len(file_Converter_proto_rawDesc)))
	})
	return file_Converter_proto_rawDescData
}

var file_Converter_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_Converter_proto_goTypes = []any{
	(*FileChunk)(nil),  // 0: Converter.FileChunk
	(*ParsedText)(nil), // 1: Converter.ParsedText
}
var file_Converter_proto_depIdxs = []int32{
	0, // 0: Converter.Converter.ConvertFile:input_type -> Converter.FileChunk
	1, // 1: Converter.Converter.ConvertFile:output_type -> Converter.ParsedText
	1, // [1:2] is the sub-list for method output_type
	0, // [0:1] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_Converter_proto_init() }
func file_Converter_proto_init() {
	if File_Converter_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_Converter_proto_rawDesc), len(file_Converter_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_Converter_proto_goTypes,
		DependencyIndexes: file_Converter_proto_depIdxs,
		MessageInfos:      file_Converter_proto_msgTypes,
	}.Build()
	File_Converter_proto = out.File
	file_Converter_proto_goTypes = nil
	file_Converter_proto_depIdxs = nil
}
