// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: Converter.proto

package Converter

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Converter_ConvertFile_FullMethodName = "/Converter.Converter/ConvertFile"
)

// ConverterClient is the client API for Converter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConverterClient interface {
	ConvertFile(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[FileChunk, ParsedText], error)
}

type converterClient struct {
	cc grpc.ClientConnInterface
}

func NewConverterClient(cc grpc.ClientConnInterface) ConverterClient {
	return &converterClient{cc}
}

func (c *converterClient) ConvertFile(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[FileChunk, ParsedText], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Converter_ServiceDesc.Streams[0], Converter_ConvertFile_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[FileChunk, ParsedText]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Converter_ConvertFileClient = grpc.BidiStreamingClient[FileChunk, ParsedText]

// ConverterServer is the server API for Converter service.
// All implementations must embed UnimplementedConverterServer
// for forward compatibility.
type ConverterServer interface {
	ConvertFile(grpc.BidiStreamingServer[FileChunk, ParsedText]) error
	mustEmbedUnimplementedConverterServer()
}

// UnimplementedConverterServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedConverterServer struct{}

func (UnimplementedConverterServer) ConvertFile(grpc.BidiStreamingServer[FileChunk, ParsedText]) error {
	return status.Errorf(codes.Unimplemented, "method ConvertFile not implemented")
}
func (UnimplementedConverterServer) mustEmbedUnimplementedConverterServer() {}
func (UnimplementedConverterServer) testEmbeddedByValue()                   {}

// UnsafeConverterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConverterServer will
// result in compilation errors.
type UnsafeConverterServer interface {
	mustEmbedUnimplementedConverterServer()
}

func RegisterConverterServer(s grpc.ServiceRegistrar, srv ConverterServer) {
	// If the following call pancis, it indicates UnimplementedConverterServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Converter_ServiceDesc, srv)
}

func _Converter_ConvertFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ConverterServer).ConvertFile(&grpc.GenericServerStream[FileChunk, ParsedText]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Converter_ConvertFileServer = grpc.BidiStreamingServer[FileChunk, ParsedText]

// Converter_ServiceDesc is the grpc.ServiceDesc for Converter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Converter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Converter.Converter",
	HandlerType: (*ConverterServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ConvertFile",
			Handler:       _Converter_ConvertFile_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "Converter.proto",
}
