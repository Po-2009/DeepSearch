// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: FileUpload.proto

package FileUpload

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Стрим чанков файла
type FileChunk struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filename      string                 `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"`
	Content       []byte                 `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FileChunk) Reset() {
	*x = FileChunk{}
	mi := &file_FileUpload_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileChunk) ProtoMessage() {}

func (x *FileChunk) ProtoReflect() protoreflect.Message {
	mi := &file_FileUpload_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileChunk.ProtoReflect.Descriptor instead.
func (*FileChunk) Descriptor() ([]byte, []int) {
	return file_FileUpload_proto_rawDescGZIP(), []int{0}
}

func (x *FileChunk) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *FileChunk) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

type FilesCount struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FilesCount    int32                  `protobuf:"varint,2,opt,name=filesCount,proto3" json:"filesCount,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FilesCount) Reset() {
	*x = FilesCount{}
	mi := &file_FileUpload_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FilesCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesCount) ProtoMessage() {}

func (x *FilesCount) ProtoReflect() protoreflect.Message {
	mi := &file_FileUpload_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesCount.ProtoReflect.Descriptor instead.
func (*FilesCount) Descriptor() ([]byte, []int) {
	return file_FileUpload_proto_rawDescGZIP(), []int{1}
}

func (x *FilesCount) GetFilesCount() int32 {
	if x != nil {
		return x.FilesCount
	}
	return 0
}

type UploadResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UploadResponse) Reset() {
	*x = UploadResponse{}
	mi := &file_FileUpload_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UploadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadResponse) ProtoMessage() {}

func (x *UploadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_FileUpload_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadResponse.ProtoReflect.Descriptor instead.
func (*UploadResponse) Descriptor() ([]byte, []int) {
	return file_FileUpload_proto_rawDescGZIP(), []int{2}
}

func (x *UploadResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type QueryRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Query         string                 `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryRequest) Reset() {
	*x = QueryRequest{}
	mi := &file_FileUpload_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRequest) ProtoMessage() {}

func (x *QueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_FileUpload_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRequest.ProtoReflect.Descriptor instead.
func (*QueryRequest) Descriptor() ([]byte, []int) {
	return file_FileUpload_proto_rawDescGZIP(), []int{3}
}

func (x *QueryRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

// Один результат
type QueryResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Query         string                 `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	Matches       []*FileMatch           `protobuf:"bytes,2,rep,name=matches,proto3" json:"matches,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryResult) Reset() {
	*x = QueryResult{}
	mi := &file_FileUpload_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryResult) ProtoMessage() {}

func (x *QueryResult) ProtoReflect() protoreflect.Message {
	mi := &file_FileUpload_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryResult.ProtoReflect.Descriptor instead.
func (*QueryResult) Descriptor() ([]byte, []int) {
	return file_FileUpload_proto_rawDescGZIP(), []int{4}
}

func (x *QueryResult) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *QueryResult) GetMatches() []*FileMatch {
	if x != nil {
		return x.Matches
	}
	return nil
}

// Результат по одному файлу
type FileMatch struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filename      string                 `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
	Rank          float32                `protobuf:"fixed32,2,opt,name=rank,proto3" json:"rank,omitempty"` // Чем ближе к 1 — тем релевантнее
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FileMatch) Reset() {
	*x = FileMatch{}
	mi := &file_FileUpload_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileMatch) ProtoMessage() {}

func (x *FileMatch) ProtoReflect() protoreflect.Message {
	mi := &file_FileUpload_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileMatch.ProtoReflect.Descriptor instead.
func (*FileMatch) Descriptor() ([]byte, []int) {
	return file_FileUpload_proto_rawDescGZIP(), []int{5}
}

func (x *FileMatch) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *FileMatch) GetRank() float32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

var File_FileUpload_proto protoreflect.FileDescriptor

const file_FileUpload_proto_rawDesc = "" +
	"\n" +
	"\x10FileUpload.proto\x12\n" +
	"FileUpload\"A\n" +
	"\tFileChunk\x12\x1a\n" +
	"\bfilename\x18\x02 \x01(\tR\bfilename\x12\x18\n" +
	"\acontent\x18\x03 \x01(\fR\acontent\",\n" +
	"\n" +
	"FilesCount\x12\x1e\n" +
	"\n" +
	"filesCount\x18\x02 \x01(\x05R\n" +
	"filesCount\"*\n" +
	"\x0eUploadResponse\x12\x18\n" +
	"\amessage\x18\x01 \x01(\tR\amessage\"$\n" +
	"\fQueryRequest\x12\x14\n" +
	"\x05query\x18\x02 \x01(\tR\x05query\"T\n" +
	"\vQueryResult\x12\x14\n" +
	"\x05query\x18\x01 \x01(\tR\x05query\x12/\n" +
	"\amatches\x18\x02 \x03(\v2\x15.FileUpload.FileMatchR\amatches\";\n" +
	"\tFileMatch\x12\x1a\n" +
	"\bfilename\x18\x01 \x01(\tR\bfilename\x12\x12\n" +
	"\x04rank\x18\x02 \x01(\x02R\x04rank2\xda\x01\n" +
	"\vFileService\x12A\n" +
	"\n" +
	"UploadFile\x12\x15.FileUpload.FileChunk\x1a\x1a.FileUpload.UploadResponse(\x01\x12D\n" +
	"\x0eSendFilesCount\x12\x16.FileUpload.FilesCount\x1a\x1a.FileUpload.UploadResponse\x12B\n" +
	"\tSendQuery\x12\x18.FileUpload.QueryRequest\x1a\x17.FileUpload.QueryResult(\x010\x01B\x0eZ\f/;FileUploadb\x06proto3"

var (
	file_FileUpload_proto_rawDescOnce sync.Once
	file_FileUpload_proto_rawDescData []byte
)

func file_FileUpload_proto_rawDescGZIP() []byte {
	file_FileUpload_proto_rawDescOnce.Do(func() {
		file_FileUpload_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_FileUpload_proto_rawDesc), len(file_FileUpload_proto_rawDesc)))
	})
	return file_FileUpload_proto_rawDescData
}

var file_FileUpload_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_FileUpload_proto_goTypes = []any{
	(*FileChunk)(nil),      // 0: FileUpload.FileChunk
	(*FilesCount)(nil),     // 1: FileUpload.FilesCount
	(*UploadResponse)(nil), // 2: FileUpload.UploadResponse
	(*QueryRequest)(nil),   // 3: FileUpload.QueryRequest
	(*QueryResult)(nil),    // 4: FileUpload.QueryResult
	(*FileMatch)(nil),      // 5: FileUpload.FileMatch
}
var file_FileUpload_proto_depIdxs = []int32{
	5, // 0: FileUpload.QueryResult.matches:type_name -> FileUpload.FileMatch
	0, // 1: FileUpload.FileService.UploadFile:input_type -> FileUpload.FileChunk
	1, // 2: FileUpload.FileService.SendFilesCount:input_type -> FileUpload.FilesCount
	3, // 3: FileUpload.FileService.SendQuery:input_type -> FileUpload.QueryRequest
	2, // 4: FileUpload.FileService.UploadFile:output_type -> FileUpload.UploadResponse
	2, // 5: FileUpload.FileService.SendFilesCount:output_type -> FileUpload.UploadResponse
	4, // 6: FileUpload.FileService.SendQuery:output_type -> FileUpload.QueryResult
	4, // [4:7] is the sub-list for method output_type
	1, // [1:4] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_FileUpload_proto_init() }
func file_FileUpload_proto_init() {
	if File_FileUpload_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_FileUpload_proto_rawDesc), len(file_FileUpload_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_FileUpload_proto_goTypes,
		DependencyIndexes: file_FileUpload_proto_depIdxs,
		MessageInfos:      file_FileUpload_proto_msgTypes,
	}.Build()
	File_FileUpload_proto = out.File
	file_FileUpload_proto_goTypes = nil
	file_FileUpload_proto_depIdxs = nil
}
