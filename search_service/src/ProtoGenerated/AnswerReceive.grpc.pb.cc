// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: AnswerReceive.proto

#include "AnswerReceive.pb.h"
#include "AnswerReceive.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace AnswerReceive {

static const char* Dictionary_method_names[] = {
  "/AnswerReceive.Dictionary/SendFilesCount",
  "/AnswerReceive.Dictionary/SendDictionary",
  "/AnswerReceive.Dictionary/Search",
};

std::unique_ptr< Dictionary::Stub> Dictionary::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Dictionary::Stub> stub(new Dictionary::Stub(channel, options));
  return stub;
}

Dictionary::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_SendFilesCount_(Dictionary_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendDictionary_(Dictionary_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_Search_(Dictionary_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::Status Dictionary::Stub::SendFilesCount(::grpc::ClientContext* context, const ::AnswerReceive::FilesCount& request, ::AnswerReceive::UploadResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::AnswerReceive::FilesCount, ::AnswerReceive::UploadResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendFilesCount_, context, request, response);
}

void Dictionary::Stub::async::SendFilesCount(::grpc::ClientContext* context, const ::AnswerReceive::FilesCount* request, ::AnswerReceive::UploadResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::AnswerReceive::FilesCount, ::AnswerReceive::UploadResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendFilesCount_, context, request, response, std::move(f));
}

void Dictionary::Stub::async::SendFilesCount(::grpc::ClientContext* context, const ::AnswerReceive::FilesCount* request, ::AnswerReceive::UploadResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendFilesCount_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::AnswerReceive::UploadResponse>* Dictionary::Stub::PrepareAsyncSendFilesCountRaw(::grpc::ClientContext* context, const ::AnswerReceive::FilesCount& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::AnswerReceive::UploadResponse, ::AnswerReceive::FilesCount, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendFilesCount_, context, request);
}

::grpc::ClientAsyncResponseReader< ::AnswerReceive::UploadResponse>* Dictionary::Stub::AsyncSendFilesCountRaw(::grpc::ClientContext* context, const ::AnswerReceive::FilesCount& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendFilesCountRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientWriter< ::AnswerReceive::WordEntry>* Dictionary::Stub::SendDictionaryRaw(::grpc::ClientContext* context, ::AnswerReceive::UploadResponse* response) {
  return ::grpc::internal::ClientWriterFactory< ::AnswerReceive::WordEntry>::Create(channel_.get(), rpcmethod_SendDictionary_, context, response);
}

void Dictionary::Stub::async::SendDictionary(::grpc::ClientContext* context, ::AnswerReceive::UploadResponse* response, ::grpc::ClientWriteReactor< ::AnswerReceive::WordEntry>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::AnswerReceive::WordEntry>::Create(stub_->channel_.get(), stub_->rpcmethod_SendDictionary_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::AnswerReceive::WordEntry>* Dictionary::Stub::AsyncSendDictionaryRaw(::grpc::ClientContext* context, ::AnswerReceive::UploadResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::AnswerReceive::WordEntry>::Create(channel_.get(), cq, rpcmethod_SendDictionary_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::AnswerReceive::WordEntry>* Dictionary::Stub::PrepareAsyncSendDictionaryRaw(::grpc::ClientContext* context, ::AnswerReceive::UploadResponse* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::AnswerReceive::WordEntry>::Create(channel_.get(), cq, rpcmethod_SendDictionary_, context, response, false, nullptr);
}

::grpc::ClientReaderWriter< ::AnswerReceive::Query, ::AnswerReceive::QueryResult>* Dictionary::Stub::SearchRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::AnswerReceive::Query, ::AnswerReceive::QueryResult>::Create(channel_.get(), rpcmethod_Search_, context);
}

void Dictionary::Stub::async::Search(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::AnswerReceive::Query,::AnswerReceive::QueryResult>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::AnswerReceive::Query,::AnswerReceive::QueryResult>::Create(stub_->channel_.get(), stub_->rpcmethod_Search_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::AnswerReceive::Query, ::AnswerReceive::QueryResult>* Dictionary::Stub::AsyncSearchRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::AnswerReceive::Query, ::AnswerReceive::QueryResult>::Create(channel_.get(), cq, rpcmethod_Search_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::AnswerReceive::Query, ::AnswerReceive::QueryResult>* Dictionary::Stub::PrepareAsyncSearchRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::AnswerReceive::Query, ::AnswerReceive::QueryResult>::Create(channel_.get(), cq, rpcmethod_Search_, context, false, nullptr);
}

Dictionary::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Dictionary_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Dictionary::Service, ::AnswerReceive::FilesCount, ::AnswerReceive::UploadResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Dictionary::Service* service,
             ::grpc::ServerContext* ctx,
             const ::AnswerReceive::FilesCount* req,
             ::AnswerReceive::UploadResponse* resp) {
               return service->SendFilesCount(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Dictionary_method_names[1],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< Dictionary::Service, ::AnswerReceive::WordEntry, ::AnswerReceive::UploadResponse>(
          [](Dictionary::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::AnswerReceive::WordEntry>* reader,
             ::AnswerReceive::UploadResponse* resp) {
               return service->SendDictionary(ctx, reader, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Dictionary_method_names[2],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< Dictionary::Service, ::AnswerReceive::Query, ::AnswerReceive::QueryResult>(
          [](Dictionary::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::AnswerReceive::QueryResult,
             ::AnswerReceive::Query>* stream) {
               return service->Search(ctx, stream);
             }, this)));
}

Dictionary::Service::~Service() {
}

::grpc::Status Dictionary::Service::SendFilesCount(::grpc::ServerContext* context, const ::AnswerReceive::FilesCount* request, ::AnswerReceive::UploadResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Dictionary::Service::SendDictionary(::grpc::ServerContext* context, ::grpc::ServerReader< ::AnswerReceive::WordEntry>* reader, ::AnswerReceive::UploadResponse* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Dictionary::Service::Search(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::AnswerReceive::QueryResult, ::AnswerReceive::Query>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace AnswerReceive

