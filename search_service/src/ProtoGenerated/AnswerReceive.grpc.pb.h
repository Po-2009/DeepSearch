// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: AnswerReceive.proto
#ifndef GRPC_AnswerReceive_2eproto__INCLUDED
#define GRPC_AnswerReceive_2eproto__INCLUDED

#include "AnswerReceive.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>

namespace AnswerReceive {

class Dictionary final {
 public:
  static constexpr char const* service_full_name() {
    return "AnswerReceive.Dictionary";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status SendFilesCount(::grpc::ClientContext* context, const ::AnswerReceive::FilesCount& request, ::AnswerReceive::UploadResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AnswerReceive::UploadResponse>> AsyncSendFilesCount(::grpc::ClientContext* context, const ::AnswerReceive::FilesCount& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AnswerReceive::UploadResponse>>(AsyncSendFilesCountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AnswerReceive::UploadResponse>> PrepareAsyncSendFilesCount(::grpc::ClientContext* context, const ::AnswerReceive::FilesCount& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AnswerReceive::UploadResponse>>(PrepareAsyncSendFilesCountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriterInterface< ::AnswerReceive::WordEntry>> SendDictionary(::grpc::ClientContext* context, ::AnswerReceive::UploadResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::AnswerReceive::WordEntry>>(SendDictionaryRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::AnswerReceive::WordEntry>> AsyncSendDictionary(::grpc::ClientContext* context, ::AnswerReceive::UploadResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::AnswerReceive::WordEntry>>(AsyncSendDictionaryRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::AnswerReceive::WordEntry>> PrepareAsyncSendDictionary(::grpc::ClientContext* context, ::AnswerReceive::UploadResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::AnswerReceive::WordEntry>>(PrepareAsyncSendDictionaryRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::AnswerReceive::Query, ::AnswerReceive::QueryResult>> Search(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::AnswerReceive::Query, ::AnswerReceive::QueryResult>>(SearchRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::AnswerReceive::Query, ::AnswerReceive::QueryResult>> AsyncSearch(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::AnswerReceive::Query, ::AnswerReceive::QueryResult>>(AsyncSearchRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::AnswerReceive::Query, ::AnswerReceive::QueryResult>> PrepareAsyncSearch(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::AnswerReceive::Query, ::AnswerReceive::QueryResult>>(PrepareAsyncSearchRaw(context, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void SendFilesCount(::grpc::ClientContext* context, const ::AnswerReceive::FilesCount* request, ::AnswerReceive::UploadResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SendFilesCount(::grpc::ClientContext* context, const ::AnswerReceive::FilesCount* request, ::AnswerReceive::UploadResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SendDictionary(::grpc::ClientContext* context, ::AnswerReceive::UploadResponse* response, ::grpc::ClientWriteReactor< ::AnswerReceive::WordEntry>* reactor) = 0;
      virtual void Search(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::AnswerReceive::Query,::AnswerReceive::QueryResult>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::AnswerReceive::UploadResponse>* AsyncSendFilesCountRaw(::grpc::ClientContext* context, const ::AnswerReceive::FilesCount& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::AnswerReceive::UploadResponse>* PrepareAsyncSendFilesCountRaw(::grpc::ClientContext* context, const ::AnswerReceive::FilesCount& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::AnswerReceive::WordEntry>* SendDictionaryRaw(::grpc::ClientContext* context, ::AnswerReceive::UploadResponse* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::AnswerReceive::WordEntry>* AsyncSendDictionaryRaw(::grpc::ClientContext* context, ::AnswerReceive::UploadResponse* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::AnswerReceive::WordEntry>* PrepareAsyncSendDictionaryRaw(::grpc::ClientContext* context, ::AnswerReceive::UploadResponse* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::AnswerReceive::Query, ::AnswerReceive::QueryResult>* SearchRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::AnswerReceive::Query, ::AnswerReceive::QueryResult>* AsyncSearchRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::AnswerReceive::Query, ::AnswerReceive::QueryResult>* PrepareAsyncSearchRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status SendFilesCount(::grpc::ClientContext* context, const ::AnswerReceive::FilesCount& request, ::AnswerReceive::UploadResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AnswerReceive::UploadResponse>> AsyncSendFilesCount(::grpc::ClientContext* context, const ::AnswerReceive::FilesCount& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AnswerReceive::UploadResponse>>(AsyncSendFilesCountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AnswerReceive::UploadResponse>> PrepareAsyncSendFilesCount(::grpc::ClientContext* context, const ::AnswerReceive::FilesCount& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AnswerReceive::UploadResponse>>(PrepareAsyncSendFilesCountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::AnswerReceive::WordEntry>> SendDictionary(::grpc::ClientContext* context, ::AnswerReceive::UploadResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::AnswerReceive::WordEntry>>(SendDictionaryRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::AnswerReceive::WordEntry>> AsyncSendDictionary(::grpc::ClientContext* context, ::AnswerReceive::UploadResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::AnswerReceive::WordEntry>>(AsyncSendDictionaryRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::AnswerReceive::WordEntry>> PrepareAsyncSendDictionary(::grpc::ClientContext* context, ::AnswerReceive::UploadResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::AnswerReceive::WordEntry>>(PrepareAsyncSendDictionaryRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::AnswerReceive::Query, ::AnswerReceive::QueryResult>> Search(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::AnswerReceive::Query, ::AnswerReceive::QueryResult>>(SearchRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::AnswerReceive::Query, ::AnswerReceive::QueryResult>> AsyncSearch(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::AnswerReceive::Query, ::AnswerReceive::QueryResult>>(AsyncSearchRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::AnswerReceive::Query, ::AnswerReceive::QueryResult>> PrepareAsyncSearch(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::AnswerReceive::Query, ::AnswerReceive::QueryResult>>(PrepareAsyncSearchRaw(context, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void SendFilesCount(::grpc::ClientContext* context, const ::AnswerReceive::FilesCount* request, ::AnswerReceive::UploadResponse* response, std::function<void(::grpc::Status)>) override;
      void SendFilesCount(::grpc::ClientContext* context, const ::AnswerReceive::FilesCount* request, ::AnswerReceive::UploadResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SendDictionary(::grpc::ClientContext* context, ::AnswerReceive::UploadResponse* response, ::grpc::ClientWriteReactor< ::AnswerReceive::WordEntry>* reactor) override;
      void Search(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::AnswerReceive::Query,::AnswerReceive::QueryResult>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::AnswerReceive::UploadResponse>* AsyncSendFilesCountRaw(::grpc::ClientContext* context, const ::AnswerReceive::FilesCount& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::AnswerReceive::UploadResponse>* PrepareAsyncSendFilesCountRaw(::grpc::ClientContext* context, const ::AnswerReceive::FilesCount& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::AnswerReceive::WordEntry>* SendDictionaryRaw(::grpc::ClientContext* context, ::AnswerReceive::UploadResponse* response) override;
    ::grpc::ClientAsyncWriter< ::AnswerReceive::WordEntry>* AsyncSendDictionaryRaw(::grpc::ClientContext* context, ::AnswerReceive::UploadResponse* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::AnswerReceive::WordEntry>* PrepareAsyncSendDictionaryRaw(::grpc::ClientContext* context, ::AnswerReceive::UploadResponse* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::AnswerReceive::Query, ::AnswerReceive::QueryResult>* SearchRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::AnswerReceive::Query, ::AnswerReceive::QueryResult>* AsyncSearchRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::AnswerReceive::Query, ::AnswerReceive::QueryResult>* PrepareAsyncSearchRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SendFilesCount_;
    const ::grpc::internal::RpcMethod rpcmethod_SendDictionary_;
    const ::grpc::internal::RpcMethod rpcmethod_Search_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status SendFilesCount(::grpc::ServerContext* context, const ::AnswerReceive::FilesCount* request, ::AnswerReceive::UploadResponse* response);
    virtual ::grpc::Status SendDictionary(::grpc::ServerContext* context, ::grpc::ServerReader< ::AnswerReceive::WordEntry>* reader, ::AnswerReceive::UploadResponse* response);
    virtual ::grpc::Status Search(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::AnswerReceive::QueryResult, ::AnswerReceive::Query>* stream);
  };
  template <class BaseClass>
  class WithAsyncMethod_SendFilesCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SendFilesCount() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SendFilesCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendFilesCount(::grpc::ServerContext* /*context*/, const ::AnswerReceive::FilesCount* /*request*/, ::AnswerReceive::UploadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendFilesCount(::grpc::ServerContext* context, ::AnswerReceive::FilesCount* request, ::grpc::ServerAsyncResponseWriter< ::AnswerReceive::UploadResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SendDictionary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SendDictionary() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_SendDictionary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendDictionary(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::AnswerReceive::WordEntry>* /*reader*/, ::AnswerReceive::UploadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendDictionary(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::AnswerReceive::UploadResponse, ::AnswerReceive::WordEntry>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(1, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Search : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Search() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Search() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Search(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::AnswerReceive::QueryResult, ::AnswerReceive::Query>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSearch(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::AnswerReceive::QueryResult, ::AnswerReceive::Query>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(2, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SendFilesCount<WithAsyncMethod_SendDictionary<WithAsyncMethod_Search<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_SendFilesCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SendFilesCount() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::AnswerReceive::FilesCount, ::AnswerReceive::UploadResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::AnswerReceive::FilesCount* request, ::AnswerReceive::UploadResponse* response) { return this->SendFilesCount(context, request, response); }));}
    void SetMessageAllocatorFor_SendFilesCount(
        ::grpc::MessageAllocator< ::AnswerReceive::FilesCount, ::AnswerReceive::UploadResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::AnswerReceive::FilesCount, ::AnswerReceive::UploadResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SendFilesCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendFilesCount(::grpc::ServerContext* /*context*/, const ::AnswerReceive::FilesCount* /*request*/, ::AnswerReceive::UploadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendFilesCount(
      ::grpc::CallbackServerContext* /*context*/, const ::AnswerReceive::FilesCount* /*request*/, ::AnswerReceive::UploadResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SendDictionary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SendDictionary() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackClientStreamingHandler< ::AnswerReceive::WordEntry, ::AnswerReceive::UploadResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, ::AnswerReceive::UploadResponse* response) { return this->SendDictionary(context, response); }));
    }
    ~WithCallbackMethod_SendDictionary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendDictionary(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::AnswerReceive::WordEntry>* /*reader*/, ::AnswerReceive::UploadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::AnswerReceive::WordEntry>* SendDictionary(
      ::grpc::CallbackServerContext* /*context*/, ::AnswerReceive::UploadResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Search : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Search() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackBidiHandler< ::AnswerReceive::Query, ::AnswerReceive::QueryResult>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->Search(context); }));
    }
    ~WithCallbackMethod_Search() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Search(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::AnswerReceive::QueryResult, ::AnswerReceive::Query>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::AnswerReceive::Query, ::AnswerReceive::QueryResult>* Search(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  typedef WithCallbackMethod_SendFilesCount<WithCallbackMethod_SendDictionary<WithCallbackMethod_Search<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_SendFilesCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SendFilesCount() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SendFilesCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendFilesCount(::grpc::ServerContext* /*context*/, const ::AnswerReceive::FilesCount* /*request*/, ::AnswerReceive::UploadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SendDictionary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SendDictionary() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_SendDictionary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendDictionary(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::AnswerReceive::WordEntry>* /*reader*/, ::AnswerReceive::UploadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Search : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Search() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Search() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Search(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::AnswerReceive::QueryResult, ::AnswerReceive::Query>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendFilesCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SendFilesCount() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SendFilesCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendFilesCount(::grpc::ServerContext* /*context*/, const ::AnswerReceive::FilesCount* /*request*/, ::AnswerReceive::UploadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendFilesCount(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendDictionary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SendDictionary() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_SendDictionary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendDictionary(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::AnswerReceive::WordEntry>* /*reader*/, ::AnswerReceive::UploadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendDictionary(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(1, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Search : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Search() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Search() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Search(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::AnswerReceive::QueryResult, ::AnswerReceive::Query>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSearch(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(2, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SendFilesCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SendFilesCount() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SendFilesCount(context, request, response); }));
    }
    ~WithRawCallbackMethod_SendFilesCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendFilesCount(::grpc::ServerContext* /*context*/, const ::AnswerReceive::FilesCount* /*request*/, ::AnswerReceive::UploadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendFilesCount(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SendDictionary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SendDictionary() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, ::grpc::ByteBuffer* response) { return this->SendDictionary(context, response); }));
    }
    ~WithRawCallbackMethod_SendDictionary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendDictionary(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::AnswerReceive::WordEntry>* /*reader*/, ::AnswerReceive::UploadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* SendDictionary(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Search : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Search() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->Search(context); }));
    }
    ~WithRawCallbackMethod_Search() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Search(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::AnswerReceive::QueryResult, ::AnswerReceive::Query>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* Search(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SendFilesCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SendFilesCount() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::AnswerReceive::FilesCount, ::AnswerReceive::UploadResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::AnswerReceive::FilesCount, ::AnswerReceive::UploadResponse>* streamer) {
                       return this->StreamedSendFilesCount(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SendFilesCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendFilesCount(::grpc::ServerContext* /*context*/, const ::AnswerReceive::FilesCount* /*request*/, ::AnswerReceive::UploadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSendFilesCount(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::AnswerReceive::FilesCount,::AnswerReceive::UploadResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SendFilesCount<Service > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_SendFilesCount<Service > StreamedService;
};

}  // namespace AnswerReceive


#include <grpcpp/ports_undef.inc>
#endif  // GRPC_AnswerReceive_2eproto__INCLUDED
