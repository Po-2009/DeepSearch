// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: AnswerReceive.proto
// Protobuf C++ Version: 5.29.3

#ifndef AnswerReceive_2eproto_2epb_2eh
#define AnswerReceive_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_AnswerReceive_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_AnswerReceive_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_AnswerReceive_2eproto;
namespace AnswerReceive {
class FileFrequency;
struct FileFrequencyDefaultTypeInternal;
extern FileFrequencyDefaultTypeInternal _FileFrequency_default_instance_;
class FileMatch;
struct FileMatchDefaultTypeInternal;
extern FileMatchDefaultTypeInternal _FileMatch_default_instance_;
class FilesCount;
struct FilesCountDefaultTypeInternal;
extern FilesCountDefaultTypeInternal _FilesCount_default_instance_;
class Query;
struct QueryDefaultTypeInternal;
extern QueryDefaultTypeInternal _Query_default_instance_;
class QueryResult;
struct QueryResultDefaultTypeInternal;
extern QueryResultDefaultTypeInternal _QueryResult_default_instance_;
class UploadResponse;
struct UploadResponseDefaultTypeInternal;
extern UploadResponseDefaultTypeInternal _UploadResponse_default_instance_;
class WordEntry;
struct WordEntryDefaultTypeInternal;
extern WordEntryDefaultTypeInternal _WordEntry_default_instance_;
}  // namespace AnswerReceive
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace AnswerReceive {

// ===================================================================


// -------------------------------------------------------------------

class UploadResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:AnswerReceive.UploadResponse) */ {
 public:
  inline UploadResponse() : UploadResponse(nullptr) {}
  ~UploadResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(UploadResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(UploadResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR UploadResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline UploadResponse(const UploadResponse& from) : UploadResponse(nullptr, from) {}
  inline UploadResponse(UploadResponse&& from) noexcept
      : UploadResponse(nullptr, std::move(from)) {}
  inline UploadResponse& operator=(const UploadResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UploadResponse& operator=(UploadResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UploadResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UploadResponse* internal_default_instance() {
    return reinterpret_cast<const UploadResponse*>(
        &_UploadResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(UploadResponse& a, UploadResponse& b) { a.Swap(&b); }
  inline void Swap(UploadResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UploadResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UploadResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<UploadResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UploadResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const UploadResponse& from) { UploadResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(UploadResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "AnswerReceive.UploadResponse"; }

 protected:
  explicit UploadResponse(::google::protobuf::Arena* arena);
  UploadResponse(::google::protobuf::Arena* arena, const UploadResponse& from);
  UploadResponse(::google::protobuf::Arena* arena, UploadResponse&& from) noexcept
      : UploadResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMessageFieldNumber = 1,
  };
  // string message = 1;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // @@protoc_insertion_point(class_scope:AnswerReceive.UploadResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      44, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const UploadResponse& from_msg);
    ::google::protobuf::internal::ArenaStringPtr message_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_AnswerReceive_2eproto;
};
// -------------------------------------------------------------------

class Query final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:AnswerReceive.Query) */ {
 public:
  inline Query() : Query(nullptr) {}
  ~Query() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Query* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Query));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Query(
      ::google::protobuf::internal::ConstantInitialized);

  inline Query(const Query& from) : Query(nullptr, from) {}
  inline Query(Query&& from) noexcept
      : Query(nullptr, std::move(from)) {}
  inline Query& operator=(const Query& from) {
    CopyFrom(from);
    return *this;
  }
  inline Query& operator=(Query&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Query& default_instance() {
    return *internal_default_instance();
  }
  static inline const Query* internal_default_instance() {
    return reinterpret_cast<const Query*>(
        &_Query_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(Query& a, Query& b) { a.Swap(&b); }
  inline void Swap(Query* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Query* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Query* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Query>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Query& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Query& from) { Query::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Query* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "AnswerReceive.Query"; }

 protected:
  explicit Query(::google::protobuf::Arena* arena);
  Query(::google::protobuf::Arena* arena, const Query& from);
  Query(::google::protobuf::Arena* arena, Query&& from) noexcept
      : Query(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kQueryFieldNumber = 1,
  };
  // string query = 1;
  void clear_query() ;
  const std::string& query() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_query(Arg_&& arg, Args_... args);
  std::string* mutable_query();
  PROTOBUF_NODISCARD std::string* release_query();
  void set_allocated_query(std::string* value);

  private:
  const std::string& _internal_query() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_query(
      const std::string& value);
  std::string* _internal_mutable_query();

  public:
  // @@protoc_insertion_point(class_scope:AnswerReceive.Query)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      33, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Query& from_msg);
    ::google::protobuf::internal::ArenaStringPtr query_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_AnswerReceive_2eproto;
};
// -------------------------------------------------------------------

class FilesCount final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:AnswerReceive.FilesCount) */ {
 public:
  inline FilesCount() : FilesCount(nullptr) {}
  ~FilesCount() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(FilesCount* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(FilesCount));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR FilesCount(
      ::google::protobuf::internal::ConstantInitialized);

  inline FilesCount(const FilesCount& from) : FilesCount(nullptr, from) {}
  inline FilesCount(FilesCount&& from) noexcept
      : FilesCount(nullptr, std::move(from)) {}
  inline FilesCount& operator=(const FilesCount& from) {
    CopyFrom(from);
    return *this;
  }
  inline FilesCount& operator=(FilesCount&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FilesCount& default_instance() {
    return *internal_default_instance();
  }
  static inline const FilesCount* internal_default_instance() {
    return reinterpret_cast<const FilesCount*>(
        &_FilesCount_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(FilesCount& a, FilesCount& b) { a.Swap(&b); }
  inline void Swap(FilesCount* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FilesCount* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FilesCount* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<FilesCount>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const FilesCount& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const FilesCount& from) { FilesCount::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(FilesCount* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "AnswerReceive.FilesCount"; }

 protected:
  explicit FilesCount(::google::protobuf::Arena* arena);
  FilesCount(::google::protobuf::Arena* arena, const FilesCount& from);
  FilesCount(::google::protobuf::Arena* arena, FilesCount&& from) noexcept
      : FilesCount(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFilesCountFieldNumber = 2,
  };
  // int32 filesCount = 2;
  void clear_filescount() ;
  ::int32_t filescount() const;
  void set_filescount(::int32_t value);

  private:
  ::int32_t _internal_filescount() const;
  void _internal_set_filescount(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:AnswerReceive.FilesCount)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const FilesCount& from_msg);
    ::int32_t filescount_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_AnswerReceive_2eproto;
};
// -------------------------------------------------------------------

class FileMatch final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:AnswerReceive.FileMatch) */ {
 public:
  inline FileMatch() : FileMatch(nullptr) {}
  ~FileMatch() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(FileMatch* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(FileMatch));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR FileMatch(
      ::google::protobuf::internal::ConstantInitialized);

  inline FileMatch(const FileMatch& from) : FileMatch(nullptr, from) {}
  inline FileMatch(FileMatch&& from) noexcept
      : FileMatch(nullptr, std::move(from)) {}
  inline FileMatch& operator=(const FileMatch& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileMatch& operator=(FileMatch&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileMatch& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileMatch* internal_default_instance() {
    return reinterpret_cast<const FileMatch*>(
        &_FileMatch_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(FileMatch& a, FileMatch& b) { a.Swap(&b); }
  inline void Swap(FileMatch* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileMatch* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileMatch* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<FileMatch>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const FileMatch& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const FileMatch& from) { FileMatch::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(FileMatch* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "AnswerReceive.FileMatch"; }

 protected:
  explicit FileMatch(::google::protobuf::Arena* arena);
  FileMatch(::google::protobuf::Arena* arena, const FileMatch& from);
  FileMatch(::google::protobuf::Arena* arena, FileMatch&& from) noexcept
      : FileMatch(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFilenameFieldNumber = 1,
    kRankFieldNumber = 2,
  };
  // string filename = 1;
  void clear_filename() ;
  const std::string& filename() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_filename(Arg_&& arg, Args_... args);
  std::string* mutable_filename();
  PROTOBUF_NODISCARD std::string* release_filename();
  void set_allocated_filename(std::string* value);

  private:
  const std::string& _internal_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filename(
      const std::string& value);
  std::string* _internal_mutable_filename();

  public:
  // float rank = 2;
  void clear_rank() ;
  float rank() const;
  void set_rank(float value);

  private:
  float _internal_rank() const;
  void _internal_set_rank(float value);

  public:
  // @@protoc_insertion_point(class_scope:AnswerReceive.FileMatch)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      40, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const FileMatch& from_msg);
    ::google::protobuf::internal::ArenaStringPtr filename_;
    float rank_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_AnswerReceive_2eproto;
};
// -------------------------------------------------------------------

class FileFrequency final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:AnswerReceive.FileFrequency) */ {
 public:
  inline FileFrequency() : FileFrequency(nullptr) {}
  ~FileFrequency() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(FileFrequency* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(FileFrequency));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR FileFrequency(
      ::google::protobuf::internal::ConstantInitialized);

  inline FileFrequency(const FileFrequency& from) : FileFrequency(nullptr, from) {}
  inline FileFrequency(FileFrequency&& from) noexcept
      : FileFrequency(nullptr, std::move(from)) {}
  inline FileFrequency& operator=(const FileFrequency& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileFrequency& operator=(FileFrequency&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileFrequency& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileFrequency* internal_default_instance() {
    return reinterpret_cast<const FileFrequency*>(
        &_FileFrequency_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(FileFrequency& a, FileFrequency& b) { a.Swap(&b); }
  inline void Swap(FileFrequency* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileFrequency* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileFrequency* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<FileFrequency>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const FileFrequency& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const FileFrequency& from) { FileFrequency::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(FileFrequency* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "AnswerReceive.FileFrequency"; }

 protected:
  explicit FileFrequency(::google::protobuf::Arena* arena);
  FileFrequency(::google::protobuf::Arena* arena, const FileFrequency& from);
  FileFrequency(::google::protobuf::Arena* arena, FileFrequency&& from) noexcept
      : FileFrequency(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFilenameFieldNumber = 1,
    kFrequencyFieldNumber = 2,
  };
  // string filename = 1;
  void clear_filename() ;
  const std::string& filename() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_filename(Arg_&& arg, Args_... args);
  std::string* mutable_filename();
  PROTOBUF_NODISCARD std::string* release_filename();
  void set_allocated_filename(std::string* value);

  private:
  const std::string& _internal_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filename(
      const std::string& value);
  std::string* _internal_mutable_filename();

  public:
  // int32 frequency = 2;
  void clear_frequency() ;
  ::int32_t frequency() const;
  void set_frequency(::int32_t value);

  private:
  ::int32_t _internal_frequency() const;
  void _internal_set_frequency(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:AnswerReceive.FileFrequency)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      44, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const FileFrequency& from_msg);
    ::google::protobuf::internal::ArenaStringPtr filename_;
    ::int32_t frequency_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_AnswerReceive_2eproto;
};
// -------------------------------------------------------------------

class WordEntry final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:AnswerReceive.WordEntry) */ {
 public:
  inline WordEntry() : WordEntry(nullptr) {}
  ~WordEntry() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(WordEntry* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(WordEntry));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR WordEntry(
      ::google::protobuf::internal::ConstantInitialized);

  inline WordEntry(const WordEntry& from) : WordEntry(nullptr, from) {}
  inline WordEntry(WordEntry&& from) noexcept
      : WordEntry(nullptr, std::move(from)) {}
  inline WordEntry& operator=(const WordEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline WordEntry& operator=(WordEntry&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WordEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const WordEntry* internal_default_instance() {
    return reinterpret_cast<const WordEntry*>(
        &_WordEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(WordEntry& a, WordEntry& b) { a.Swap(&b); }
  inline void Swap(WordEntry* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WordEntry* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WordEntry* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<WordEntry>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const WordEntry& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const WordEntry& from) { WordEntry::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(WordEntry* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "AnswerReceive.WordEntry"; }

 protected:
  explicit WordEntry(::google::protobuf::Arena* arena);
  WordEntry(::google::protobuf::Arena* arena, const WordEntry& from);
  WordEntry(::google::protobuf::Arena* arena, WordEntry&& from) noexcept
      : WordEntry(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFilesFieldNumber = 2,
    kWordFieldNumber = 1,
  };
  // repeated .AnswerReceive.FileFrequency files = 2;
  int files_size() const;
  private:
  int _internal_files_size() const;

  public:
  void clear_files() ;
  ::AnswerReceive::FileFrequency* mutable_files(int index);
  ::google::protobuf::RepeatedPtrField<::AnswerReceive::FileFrequency>* mutable_files();

  private:
  const ::google::protobuf::RepeatedPtrField<::AnswerReceive::FileFrequency>& _internal_files() const;
  ::google::protobuf::RepeatedPtrField<::AnswerReceive::FileFrequency>* _internal_mutable_files();
  public:
  const ::AnswerReceive::FileFrequency& files(int index) const;
  ::AnswerReceive::FileFrequency* add_files();
  const ::google::protobuf::RepeatedPtrField<::AnswerReceive::FileFrequency>& files() const;
  // string word = 1;
  void clear_word() ;
  const std::string& word() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_word(Arg_&& arg, Args_... args);
  std::string* mutable_word();
  PROTOBUF_NODISCARD std::string* release_word();
  void set_allocated_word(std::string* value);

  private:
  const std::string& _internal_word() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_word(
      const std::string& value);
  std::string* _internal_mutable_word();

  public:
  // @@protoc_insertion_point(class_scope:AnswerReceive.WordEntry)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      36, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const WordEntry& from_msg);
    ::google::protobuf::RepeatedPtrField< ::AnswerReceive::FileFrequency > files_;
    ::google::protobuf::internal::ArenaStringPtr word_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_AnswerReceive_2eproto;
};
// -------------------------------------------------------------------

class QueryResult final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:AnswerReceive.QueryResult) */ {
 public:
  inline QueryResult() : QueryResult(nullptr) {}
  ~QueryResult() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(QueryResult* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(QueryResult));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR QueryResult(
      ::google::protobuf::internal::ConstantInitialized);

  inline QueryResult(const QueryResult& from) : QueryResult(nullptr, from) {}
  inline QueryResult(QueryResult&& from) noexcept
      : QueryResult(nullptr, std::move(from)) {}
  inline QueryResult& operator=(const QueryResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryResult& operator=(QueryResult&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryResult* internal_default_instance() {
    return reinterpret_cast<const QueryResult*>(
        &_QueryResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(QueryResult& a, QueryResult& b) { a.Swap(&b); }
  inline void Swap(QueryResult* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryResult* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryResult* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<QueryResult>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const QueryResult& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const QueryResult& from) { QueryResult::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(QueryResult* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "AnswerReceive.QueryResult"; }

 protected:
  explicit QueryResult(::google::protobuf::Arena* arena);
  QueryResult(::google::protobuf::Arena* arena, const QueryResult& from);
  QueryResult(::google::protobuf::Arena* arena, QueryResult&& from) noexcept
      : QueryResult(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMatchesFieldNumber = 2,
    kQueryFieldNumber = 1,
  };
  // repeated .AnswerReceive.FileMatch matches = 2;
  int matches_size() const;
  private:
  int _internal_matches_size() const;

  public:
  void clear_matches() ;
  ::AnswerReceive::FileMatch* mutable_matches(int index);
  ::google::protobuf::RepeatedPtrField<::AnswerReceive::FileMatch>* mutable_matches();

  private:
  const ::google::protobuf::RepeatedPtrField<::AnswerReceive::FileMatch>& _internal_matches() const;
  ::google::protobuf::RepeatedPtrField<::AnswerReceive::FileMatch>* _internal_mutable_matches();
  public:
  const ::AnswerReceive::FileMatch& matches(int index) const;
  ::AnswerReceive::FileMatch* add_matches();
  const ::google::protobuf::RepeatedPtrField<::AnswerReceive::FileMatch>& matches() const;
  // string query = 1;
  void clear_query() ;
  const std::string& query() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_query(Arg_&& arg, Args_... args);
  std::string* mutable_query();
  PROTOBUF_NODISCARD std::string* release_query();
  void set_allocated_query(std::string* value);

  private:
  const std::string& _internal_query() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_query(
      const std::string& value);
  std::string* _internal_mutable_query();

  public:
  // @@protoc_insertion_point(class_scope:AnswerReceive.QueryResult)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      39, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const QueryResult& from_msg);
    ::google::protobuf::RepeatedPtrField< ::AnswerReceive::FileMatch > matches_;
    ::google::protobuf::internal::ArenaStringPtr query_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_AnswerReceive_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// WordEntry

// string word = 1;
inline void WordEntry::clear_word() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.word_.ClearToEmpty();
}
inline const std::string& WordEntry::word() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:AnswerReceive.WordEntry.word)
  return _internal_word();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WordEntry::set_word(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.word_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:AnswerReceive.WordEntry.word)
}
inline std::string* WordEntry::mutable_word() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_word();
  // @@protoc_insertion_point(field_mutable:AnswerReceive.WordEntry.word)
  return _s;
}
inline const std::string& WordEntry::_internal_word() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.word_.Get();
}
inline void WordEntry::_internal_set_word(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.word_.Set(value, GetArena());
}
inline std::string* WordEntry::_internal_mutable_word() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.word_.Mutable( GetArena());
}
inline std::string* WordEntry::release_word() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:AnswerReceive.WordEntry.word)
  return _impl_.word_.Release();
}
inline void WordEntry::set_allocated_word(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.word_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.word_.IsDefault()) {
    _impl_.word_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:AnswerReceive.WordEntry.word)
}

// repeated .AnswerReceive.FileFrequency files = 2;
inline int WordEntry::_internal_files_size() const {
  return _internal_files().size();
}
inline int WordEntry::files_size() const {
  return _internal_files_size();
}
inline void WordEntry::clear_files() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.files_.Clear();
}
inline ::AnswerReceive::FileFrequency* WordEntry::mutable_files(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:AnswerReceive.WordEntry.files)
  return _internal_mutable_files()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::AnswerReceive::FileFrequency>* WordEntry::mutable_files()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:AnswerReceive.WordEntry.files)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_files();
}
inline const ::AnswerReceive::FileFrequency& WordEntry::files(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:AnswerReceive.WordEntry.files)
  return _internal_files().Get(index);
}
inline ::AnswerReceive::FileFrequency* WordEntry::add_files() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::AnswerReceive::FileFrequency* _add = _internal_mutable_files()->Add();
  // @@protoc_insertion_point(field_add:AnswerReceive.WordEntry.files)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::AnswerReceive::FileFrequency>& WordEntry::files() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:AnswerReceive.WordEntry.files)
  return _internal_files();
}
inline const ::google::protobuf::RepeatedPtrField<::AnswerReceive::FileFrequency>&
WordEntry::_internal_files() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.files_;
}
inline ::google::protobuf::RepeatedPtrField<::AnswerReceive::FileFrequency>*
WordEntry::_internal_mutable_files() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.files_;
}

// -------------------------------------------------------------------

// FilesCount

// int32 filesCount = 2;
inline void FilesCount::clear_filescount() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filescount_ = 0;
}
inline ::int32_t FilesCount::filescount() const {
  // @@protoc_insertion_point(field_get:AnswerReceive.FilesCount.filesCount)
  return _internal_filescount();
}
inline void FilesCount::set_filescount(::int32_t value) {
  _internal_set_filescount(value);
  // @@protoc_insertion_point(field_set:AnswerReceive.FilesCount.filesCount)
}
inline ::int32_t FilesCount::_internal_filescount() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.filescount_;
}
inline void FilesCount::_internal_set_filescount(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filescount_ = value;
}

// -------------------------------------------------------------------

// FileFrequency

// string filename = 1;
inline void FileFrequency::clear_filename() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filename_.ClearToEmpty();
}
inline const std::string& FileFrequency::filename() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:AnswerReceive.FileFrequency.filename)
  return _internal_filename();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FileFrequency::set_filename(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filename_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:AnswerReceive.FileFrequency.filename)
}
inline std::string* FileFrequency::mutable_filename() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_filename();
  // @@protoc_insertion_point(field_mutable:AnswerReceive.FileFrequency.filename)
  return _s;
}
inline const std::string& FileFrequency::_internal_filename() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.filename_.Get();
}
inline void FileFrequency::_internal_set_filename(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filename_.Set(value, GetArena());
}
inline std::string* FileFrequency::_internal_mutable_filename() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.filename_.Mutable( GetArena());
}
inline std::string* FileFrequency::release_filename() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:AnswerReceive.FileFrequency.filename)
  return _impl_.filename_.Release();
}
inline void FileFrequency::set_allocated_filename(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filename_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.filename_.IsDefault()) {
    _impl_.filename_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:AnswerReceive.FileFrequency.filename)
}

// int32 frequency = 2;
inline void FileFrequency::clear_frequency() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.frequency_ = 0;
}
inline ::int32_t FileFrequency::frequency() const {
  // @@protoc_insertion_point(field_get:AnswerReceive.FileFrequency.frequency)
  return _internal_frequency();
}
inline void FileFrequency::set_frequency(::int32_t value) {
  _internal_set_frequency(value);
  // @@protoc_insertion_point(field_set:AnswerReceive.FileFrequency.frequency)
}
inline ::int32_t FileFrequency::_internal_frequency() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.frequency_;
}
inline void FileFrequency::_internal_set_frequency(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.frequency_ = value;
}

// -------------------------------------------------------------------

// UploadResponse

// string message = 1;
inline void UploadResponse::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& UploadResponse::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:AnswerReceive.UploadResponse.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UploadResponse::set_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:AnswerReceive.UploadResponse.message)
}
inline std::string* UploadResponse::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:AnswerReceive.UploadResponse.message)
  return _s;
}
inline const std::string& UploadResponse::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_.Get();
}
inline void UploadResponse::_internal_set_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(value, GetArena());
}
inline std::string* UploadResponse::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* UploadResponse::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:AnswerReceive.UploadResponse.message)
  return _impl_.message_.Release();
}
inline void UploadResponse::set_allocated_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:AnswerReceive.UploadResponse.message)
}

// -------------------------------------------------------------------

// Query

// string query = 1;
inline void Query::clear_query() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.query_.ClearToEmpty();
}
inline const std::string& Query::query() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:AnswerReceive.Query.query)
  return _internal_query();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Query::set_query(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.query_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:AnswerReceive.Query.query)
}
inline std::string* Query::mutable_query() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_query();
  // @@protoc_insertion_point(field_mutable:AnswerReceive.Query.query)
  return _s;
}
inline const std::string& Query::_internal_query() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.query_.Get();
}
inline void Query::_internal_set_query(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.query_.Set(value, GetArena());
}
inline std::string* Query::_internal_mutable_query() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.query_.Mutable( GetArena());
}
inline std::string* Query::release_query() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:AnswerReceive.Query.query)
  return _impl_.query_.Release();
}
inline void Query::set_allocated_query(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.query_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.query_.IsDefault()) {
    _impl_.query_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:AnswerReceive.Query.query)
}

// -------------------------------------------------------------------

// QueryResult

// string query = 1;
inline void QueryResult::clear_query() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.query_.ClearToEmpty();
}
inline const std::string& QueryResult::query() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:AnswerReceive.QueryResult.query)
  return _internal_query();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryResult::set_query(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.query_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:AnswerReceive.QueryResult.query)
}
inline std::string* QueryResult::mutable_query() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_query();
  // @@protoc_insertion_point(field_mutable:AnswerReceive.QueryResult.query)
  return _s;
}
inline const std::string& QueryResult::_internal_query() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.query_.Get();
}
inline void QueryResult::_internal_set_query(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.query_.Set(value, GetArena());
}
inline std::string* QueryResult::_internal_mutable_query() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.query_.Mutable( GetArena());
}
inline std::string* QueryResult::release_query() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:AnswerReceive.QueryResult.query)
  return _impl_.query_.Release();
}
inline void QueryResult::set_allocated_query(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.query_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.query_.IsDefault()) {
    _impl_.query_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:AnswerReceive.QueryResult.query)
}

// repeated .AnswerReceive.FileMatch matches = 2;
inline int QueryResult::_internal_matches_size() const {
  return _internal_matches().size();
}
inline int QueryResult::matches_size() const {
  return _internal_matches_size();
}
inline void QueryResult::clear_matches() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.matches_.Clear();
}
inline ::AnswerReceive::FileMatch* QueryResult::mutable_matches(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:AnswerReceive.QueryResult.matches)
  return _internal_mutable_matches()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::AnswerReceive::FileMatch>* QueryResult::mutable_matches()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:AnswerReceive.QueryResult.matches)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_matches();
}
inline const ::AnswerReceive::FileMatch& QueryResult::matches(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:AnswerReceive.QueryResult.matches)
  return _internal_matches().Get(index);
}
inline ::AnswerReceive::FileMatch* QueryResult::add_matches() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::AnswerReceive::FileMatch* _add = _internal_mutable_matches()->Add();
  // @@protoc_insertion_point(field_add:AnswerReceive.QueryResult.matches)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::AnswerReceive::FileMatch>& QueryResult::matches() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:AnswerReceive.QueryResult.matches)
  return _internal_matches();
}
inline const ::google::protobuf::RepeatedPtrField<::AnswerReceive::FileMatch>&
QueryResult::_internal_matches() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.matches_;
}
inline ::google::protobuf::RepeatedPtrField<::AnswerReceive::FileMatch>*
QueryResult::_internal_mutable_matches() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.matches_;
}

// -------------------------------------------------------------------

// FileMatch

// string filename = 1;
inline void FileMatch::clear_filename() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filename_.ClearToEmpty();
}
inline const std::string& FileMatch::filename() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:AnswerReceive.FileMatch.filename)
  return _internal_filename();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FileMatch::set_filename(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filename_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:AnswerReceive.FileMatch.filename)
}
inline std::string* FileMatch::mutable_filename() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_filename();
  // @@protoc_insertion_point(field_mutable:AnswerReceive.FileMatch.filename)
  return _s;
}
inline const std::string& FileMatch::_internal_filename() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.filename_.Get();
}
inline void FileMatch::_internal_set_filename(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filename_.Set(value, GetArena());
}
inline std::string* FileMatch::_internal_mutable_filename() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.filename_.Mutable( GetArena());
}
inline std::string* FileMatch::release_filename() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:AnswerReceive.FileMatch.filename)
  return _impl_.filename_.Release();
}
inline void FileMatch::set_allocated_filename(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filename_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.filename_.IsDefault()) {
    _impl_.filename_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:AnswerReceive.FileMatch.filename)
}

// float rank = 2;
inline void FileMatch::clear_rank() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rank_ = 0;
}
inline float FileMatch::rank() const {
  // @@protoc_insertion_point(field_get:AnswerReceive.FileMatch.rank)
  return _internal_rank();
}
inline void FileMatch::set_rank(float value) {
  _internal_set_rank(value);
  // @@protoc_insertion_point(field_set:AnswerReceive.FileMatch.rank)
}
inline float FileMatch::_internal_rank() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.rank_;
}
inline void FileMatch::_internal_set_rank(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rank_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace AnswerReceive


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // AnswerReceive_2eproto_2epb_2eh
